Usage

Input

var midi = require('midi');

// Set up a new input.
var input = new midi.input();

// Count the available input ports.
input.getPortCount();

// Get the name of a specified input port.
input.getPortName(0);

// Configure a callback.
input.on('message', function(deltaTime, message) {
  // The message is an array of numbers corresponding to the MIDI bytes:
  //   [status, data1, data2]
  // https://www.cs.cf.ac.uk/Dave/Multimedia/node158.html has some helpful
  // information interpreting the messages.
  console.log('m:' + message + ' d:' + deltaTime);
});

// Open the first available input port.
input.openPort(0);

// Sysex, timing, and active sensing messages are ignored
// by default. To enable these message types, pass false for
// the appropriate type in the function below.
// Order: (Sysex, Timing, Active Sensing)
// For example if you want to receive only MIDI Clock beats
// you should use
// input.ignoreTypes(true, false, true)
input.ignoreTypes(false, false, false);

// ... receive MIDI messages ...

// Close the port when done.
input.closePort();
Output

var midi = require('midi');

// Set up a new output.
var output = new midi.output();

// Count the available output ports.
output.getPortCount();

// Get the name of a specified output port.
output.getPortName(0);

// Open the first available output port.
output.openPort(0);

// Send a MIDI message.
output.sendMessage([176,22,1]);

// Close the port when done.
output.closePort();
Virtual Ports

Instead of opening a connection to an existing MIDI device, on Mac OS X and Linux with ALSA you can create a virtual device that other software may connect to. This can be done simply by calling openVirtualPort(portName) instead of openPort(portNumber).

var midi = require('midi');

// Set up a new input.
var input = new midi.input();

// Configure a callback.
input.on('message', function(deltaTime, message) {
    console.log('m:' + message + ' d:' + deltaTime);
});

// Create a virtual input port.
input.openVirtualPort("Test Input");

// A midi device "Test Input" is now available for other
// software to send messages to.

// ... receive MIDI messages ...

// Close the port when done.
input.closePort();
The same can be done with output ports.

Streams

You can also use this library with streams! Here are the interfaces

Readable Stream

// create a readable stream
var stream1 = midi.createReadStream();

// createReadStream also accepts an optional `input` param
var input = new midi.input();
input.openVirtualPort('hello world');

var stream2 = midi.createReadStream(input)

stream2.pipe(require('fs').createWriteStream('something.bin'));
Writable Stream

// create a writable stream
var stream1 = midi.createWriteStream();

// createWriteStream also accepts an optional `output` param
var output = new midi.output();
output.openVirtualPort('hello again');

var stream2 = midi.createWriteStream(output);

require('fs').createReadStream('something.bin').pipe(stream2);
References

http://music.mcgill.ca/~gary/rtmidi/
http://syskall.com/how-to-write-your-own-native-nodejs-extension
